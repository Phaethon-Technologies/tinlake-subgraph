// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class SeniorTranche extends SmartContract {
  static bind(address: Address): SeniorTranche {
    return new SeniorTranche("SeniorTranche", address);
  }

  balance(): BigInt {
    let result = super.call("balance", []);

    return result[0].toBigInt();
  }

  try_balance(): CallResult<BigInt> {
    let result = super.tryCall("balance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  borrowed(): BigInt {
    let result = super.call("borrowed", []);

    return result[0].toBigInt();
  }

  try_borrowed(): CallResult<BigInt> {
    let result = super.tryCall("borrowed", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  debt(): BigInt {
    let result = super.call("debt", []);

    return result[0].toBigInt();
  }

  try_debt(): CallResult<BigInt> {
    let result = super.tryCall("debt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  interest(): BigInt {
    let result = super.call("interest", []);

    return result[0].toBigInt();
  }

  try_interest(): CallResult<BigInt> {
    let result = super.tryCall("interest", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdated(): BigInt {
    let result = super.call("lastUpdated", []);

    return result[0].toBigInt();
  }

  try_lastUpdated(): CallResult<BigInt> {
    let result = super.tryCall("lastUpdated", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  ratePerSecond(): BigInt {
    let result = super.call("ratePerSecond", []);

    return result[0].toBigInt();
  }

  try_ratePerSecond(): CallResult<BigInt> {
    let result = super.tryCall("ratePerSecond", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class DripCall extends EthereumCall {
  get inputs(): DripCall__Inputs {
    return new DripCall__Inputs(this);
  }

  get outputs(): DripCall__Outputs {
    return new DripCall__Outputs(this);
  }
}

export class DripCall__Inputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }
}

export class DripCall__Outputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }
}
