// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LogNote extends EthereumEvent {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get guy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get foo(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get bar(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get wad(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fax(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Assessor extends SmartContract {
  static bind(address: Address): Assessor {
    return new Assessor("Assessor", address);
  }

  calcAndUpdateTokenPrice(tranche: Address): BigInt {
    let result = super.call("calcAndUpdateTokenPrice", [
      EthereumValue.fromAddress(tranche)
    ]);

    return result[0].toBigInt();
  }

  try_calcAndUpdateTokenPrice(tranche: Address): CallResult<BigInt> {
    let result = super.tryCall("calcAndUpdateTokenPrice", [
      EthereumValue.fromAddress(tranche)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  calcAssetValue(tranche: Address): BigInt {
    let result = super.call("calcAssetValue", [
      EthereumValue.fromAddress(tranche)
    ]);

    return result[0].toBigInt();
  }

  try_calcAssetValue(tranche: Address): CallResult<BigInt> {
    let result = super.tryCall("calcAssetValue", [
      EthereumValue.fromAddress(tranche)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  calcMaxSeniorAssetValue(): BigInt {
    let result = super.call("calcMaxSeniorAssetValue", []);

    return result[0].toBigInt();
  }

  try_calcMaxSeniorAssetValue(): CallResult<BigInt> {
    let result = super.tryCall("calcMaxSeniorAssetValue", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  calcMinJuniorAssetValue(): BigInt {
    let result = super.call("calcMinJuniorAssetValue", []);

    return result[0].toBigInt();
  }

  try_calcMinJuniorAssetValue(): CallResult<BigInt> {
    let result = super.tryCall("calcMinJuniorAssetValue", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  calcTokenPrice(tranche: Address): BigInt {
    let result = super.call("calcTokenPrice", [
      EthereumValue.fromAddress(tranche)
    ]);

    return result[0].toBigInt();
  }

  try_calcTokenPrice(tranche: Address): CallResult<BigInt> {
    let result = super.tryCall("calcTokenPrice", [
      EthereumValue.fromAddress(tranche)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  currentJuniorRatio(): BigInt {
    let result = super.call("currentJuniorRatio", []);

    return result[0].toBigInt();
  }

  try_currentJuniorRatio(): CallResult<BigInt> {
    let result = super.tryCall("currentJuniorRatio", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  junior(): Address {
    let result = super.call("junior", []);

    return result[0].toAddress();
  }

  try_junior(): CallResult<Address> {
    let result = super.tryCall("junior", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  minJuniorRatio(): BigInt {
    let result = super.call("minJuniorRatio", []);

    return result[0].toBigInt();
  }

  try_minJuniorRatio(): CallResult<BigInt> {
    let result = super.tryCall("minJuniorRatio", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  pool(): Address {
    let result = super.call("pool", []);

    return result[0].toAddress();
  }

  try_pool(): CallResult<Address> {
    let result = super.tryCall("pool", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemApprove(tranche: Address, currencyAmount: BigInt): boolean {
    let result = super.call("redeemApprove", [
      EthereumValue.fromAddress(tranche),
      EthereumValue.fromUnsignedBigInt(currencyAmount)
    ]);

    return result[0].toBoolean();
  }

  try_redeemApprove(
    tranche: Address,
    currencyAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("redeemApprove", [
      EthereumValue.fromAddress(tranche),
      EthereumValue.fromUnsignedBigInt(currencyAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  senior(): Address {
    let result = super.call("senior", []);

    return result[0].toAddress();
  }

  try_senior(): CallResult<Address> {
    let result = super.tryCall("senior", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  supplyApprove(tranche: Address, currencyAmount: BigInt): boolean {
    let result = super.call("supplyApprove", [
      EthereumValue.fromAddress(tranche),
      EthereumValue.fromUnsignedBigInt(currencyAmount)
    ]);

    return result[0].toBoolean();
  }

  try_supplyApprove(
    tranche: Address,
    currencyAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("supplyApprove", [
      EthereumValue.fromAddress(tranche),
      EthereumValue.fromUnsignedBigInt(currencyAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokenAmountForONE(): BigInt {
    let result = super.call("tokenAmountForONE", []);

    return result[0].toBigInt();
  }

  try_tokenAmountForONE(): CallResult<BigInt> {
    let result = super.tryCall("tokenAmountForONE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("wards", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenAmountForONE_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CalcAndUpdateTokenPriceCall extends EthereumCall {
  get inputs(): CalcAndUpdateTokenPriceCall__Inputs {
    return new CalcAndUpdateTokenPriceCall__Inputs(this);
  }

  get outputs(): CalcAndUpdateTokenPriceCall__Outputs {
    return new CalcAndUpdateTokenPriceCall__Outputs(this);
  }
}

export class CalcAndUpdateTokenPriceCall__Inputs {
  _call: CalcAndUpdateTokenPriceCall;

  constructor(call: CalcAndUpdateTokenPriceCall) {
    this._call = call;
  }

  get tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CalcAndUpdateTokenPriceCall__Outputs {
  _call: CalcAndUpdateTokenPriceCall;

  constructor(call: CalcAndUpdateTokenPriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DenyCall extends EthereumCall {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends EthereumCall {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class FileCall extends EthereumCall {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class RedeemApproveCall extends EthereumCall {
  get inputs(): RedeemApproveCall__Inputs {
    return new RedeemApproveCall__Inputs(this);
  }

  get outputs(): RedeemApproveCall__Outputs {
    return new RedeemApproveCall__Outputs(this);
  }
}

export class RedeemApproveCall__Inputs {
  _call: RedeemApproveCall;

  constructor(call: RedeemApproveCall) {
    this._call = call;
  }

  get tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemApproveCall__Outputs {
  _call: RedeemApproveCall;

  constructor(call: RedeemApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RelyCall extends EthereumCall {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class SupplyApproveCall extends EthereumCall {
  get inputs(): SupplyApproveCall__Inputs {
    return new SupplyApproveCall__Inputs(this);
  }

  get outputs(): SupplyApproveCall__Outputs {
    return new SupplyApproveCall__Outputs(this);
  }
}

export class SupplyApproveCall__Inputs {
  _call: SupplyApproveCall;

  constructor(call: SupplyApproveCall) {
    this._call = call;
  }

  get tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SupplyApproveCall__Outputs {
  _call: SupplyApproveCall;

  constructor(call: SupplyApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
